/*
 * Copyright (c) 2019 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* HA NAT worker API */

import "vnet/interface_types.api";
import "vnet/ip/ip_types.api";

/*
 * Enable/Disable feature on interface
 */
enum hanat_worker_if_mode {
  HANAT_WORKER_IF_INSIDE,
  HANAT_WORKER_IF_OUTSIDE,
  HANAT_WORKER_IF_DUAL,
};

autoreply define hanat_worker_interface_add_del {
  u32 client_index;
  u32 context;
  vl_api_interface_index_t sw_if_index;
  bool is_add;
  vl_api_hanat_worker_if_mode_t mode;
};

define hanat_worker_interfaces {
  u32 client_index;
  u32 context;
};
define hanat_worker_interfaces_reply {
  u32 context;
  i32 retval;
  u32 n_interfaces;
  u32 sw_if_index[n_interfaces];
};

/*
 * Mapper list
 */
define hanat_worker_mapper_add_del {
  u32 client_index;
  u32 context;
  bool is_add;
  u32 fib_index;
  u32 pool_id;
  vl_api_ip4_prefix_t pool;
  vl_api_address_t src;
  vl_api_address_t mapper;
  u16 udp_port;
};
define hanat_worker_mapper_add_del_reply {
  u32 context;
  i32 retval;
  u32 mapper_index;
};

/*
 * Load balancing bucket to mapper mapping
 * Adds or replaces the lb stable hash
 */
autoreply define hanat_worker_mapper_buckets {
  u32 client_index;
  u32 context;
  u32 fib_index;
  u32 mapper_index[1024];
};

/*
 * Worker cache table
 */
enum hanat_instructions {
  HANAT_INSTR_NO_TRANSLATE           = 0x00,
  HANAT_INSTR_SOURCE_ADDRESS         = 0x01,
  HANAT_INSTR_SOURCE_PORT            = 0x02,
  HANAT_INSTR_DESTINATION_ADDRESS    = 0x04,
  HANAT_INSTR_DESTINATION_PORT       = 0x08,
  HANAT_INSTR_TCP_MSS                = 0x10,
};

typedef hanat_session_key {
  vl_api_ip4_address_t sa;
  vl_api_ip4_address_t da;
  u32 fib_index;
  u16 sp;
  u16 dp;
  u8 proto;
};

autoreply define hanat_worker_cache_add {
  u32 client_index;
  u32 context;
  vl_api_hanat_session_key_t key;
  vl_api_hanat_instructions_t instructions;
  u32 post_fib_index;
  vl_api_ip4_address_t post_sa;
  vl_api_ip4_address_t post_da;
  u16 post_sp;
  u16 post_dp;
};

define hanat_worker_cache_dump {
  u32 client_index;
  u32 context;
};
define hanat_worker_cache_details {
  u32 client_index;
  u32 context;
  vl_api_hanat_session_key_t key;
  vl_api_hanat_instructions_t instructions;
  u32 post_fib_index;
  vl_api_ip4_address_t post_sa;
  vl_api_ip4_address_t post_da;
  u16 post_sp;
  u16 post_dp;
};
