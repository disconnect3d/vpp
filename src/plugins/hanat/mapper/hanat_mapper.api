/*
 * Copyright (c) 2019 Cisco and/or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option version = "1.0.0";
import "vnet/ip/ip_types.api";

/**
 * @file hanat.api
 * @brief HA NAT mapper plugin APIs.
 */

/** \brief Control ping from client to api server request
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
*/
define hanat_mapper_control_ping
{
  u32 client_index;
  u32 context;
};

/** \brief Control ping from the client to the server response
    @param client_index - opaque cookie to identify the sender
    @param context - sender context, to match reply w/ request
    @param retval - return code for the request
    @param vpe_pid - the pid of the vpe, returned by the server
*/
define hanat_mapper_control_ping_reply
{
  u32 context;
  i32 retval;
  u32 client_index;
  u32 vpe_pid;
};

autoreply define hanat_mapper_enable
{
  u32 client_index;
  u32 context;
  u16 port;
};

autoreply define hanat_mapper_add_del_ext_addr_pool {
  u32 client_index;
  u32 context;
  vl_api_ip4_prefix_t prefix;
  u32 pool_id;
  u8 is_add;
};

autoreply define hanat_mapper_set_timeouts {
  u32 client_index;
  u32 context;
  u32 udp;
  u32 tcp_established;
  u32 tcp_transitory;
  u32 icmp;
};

autoreply define hanat_mapper_add_del_static_mapping {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t local_ip_address;
  vl_api_ip4_address_t external_ip_address;
  u16 local_port;
  u16 external_port;
  u8 protocol;
  u32 tenant_id;
  u32 pool_id;
  u8 is_add;
};

autoreply define hanat_mapper_set_state_sync_listener {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u16 port;
  u32 path_mtu;
};

define hanat_mapper_add_del_state_sync_failover {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t ip_address;
  u16 port;
  u8 is_add;
};
define hanat_mapper_add_del_state_sync_failover_reply {
  u32 context;
  i32 retval;
  u32 failover_index;
};

autoreply define hanat_mapper_set_pool_failover {
  u32 client_index;
  u32 context;
  u32 pool_id;
  u32 failover_index;
};

define hanat_mapper_user_dump {
  u32 client_index;
  u32 context;
};

define hanat_mapper_user_details {
  u32 context;
  u32 tenant_id;
  vl_api_ip4_address_t address;
  u32 nsessions;
};

define hanat_mapper_user_session_dump {
  u32 client_index;
  u32 context;
  vl_api_ip4_address_t address;
  u32 tenant_id;
};

define hanat_mapper_user_session_details {
  u32 context;
  vl_api_ip4_address_t in_l_addr;
  vl_api_ip4_address_t in_r_addr;
  u16 in_l_port;
  u16 in_r_port;
  vl_api_ip4_address_t out_l_addr;
  vl_api_ip4_address_t out_r_addr;
  u16 out_l_port;
  u16 out_r_port;
  u32 tenant_id;
  u32 pool_id;
  u8 protocol;
  u64 total_bytes;
  u64 total_pkts;
};

/*
 * Local Variables:
 * eval: (c-set-style "gnu")
 * End:
 */
